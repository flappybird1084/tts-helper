<h1><%= document.title || 'Untitled' %></h1>

<nav>
  <a href="/documents">Back to documents</a> |
  <a href="/homepage">Homepage</a> |
  <a href="/documents/<%= document._id %>/edit">Edit document</a>
</nav>


<form
  action="/documents/<%= document._id %>/delete"
  method="POST"
  onsubmit="return confirm('Delete this document? This cannot be undone.');"
>
  <button type="submit">Delete Document</button>
</form>

<section id="tts-player" style="margin-top: 1.5rem;">
  <h2>Listen to Document</h2>
  <p id="tts-unsupported" style="display: none; color: #b00;">
    Your browser does not support text-to-speech playback.
  </p>

  <div id="tts-controls" style="display: none;">
    <label for="tts-voice">Voice</label>
    <select id="tts-voice"></select>

    <label for="tts-rate" style="margin-left: 1rem;">Rate</label>
    <input id="tts-rate" type="range" min="0.5" max="1.75" step="0.05" value="1">
    <span id="tts-rate-value">1.0x</span>

    <label for="tts-pitch" style="margin-left: 1rem;">Pitch</label>
    <input id="tts-pitch" type="range" min="0.5" max="2" step="0.1" value="1">
    <span id="tts-pitch-value">1.0</span>

    <div style="margin-top: 1rem; display: flex; gap: 0.5rem; flex-wrap: wrap;">
      <button type="button" id="tts-play">Play</button>
      <button type="button" id="tts-pause" disabled>Pause</button>
      <button type="button" id="tts-resume" disabled>Resume</button>
      <button type="button" id="tts-stop" disabled>Stop</button>
    </div>
  </div>

  <p id="tts-status" style="margin-top: 0.75rem; color: #555;"></p>
</section>

<br>
<section>
  <pre style="white-space: pre-wrap;"><%= document.content || '' %></pre>
</section>

<script>
  (function () {
    const synth = window.speechSynthesis;
    // const textContent =  JSON.stringify(document.content || '');
      const textContent = <%- JSON.stringify(document.content || "") %>;
    const unsupportedBanner = document.getElementById('tts-unsupported');
    const controls = document.getElementById('tts-controls');
    const status = document.getElementById('tts-status');
    const voiceSelect = document.getElementById('tts-voice');
    const rateSlider = document.getElementById('tts-rate');
    const pitchSlider = document.getElementById('tts-pitch');
    const rateValue = document.getElementById('tts-rate-value');
    const pitchValue = document.getElementById('tts-pitch-value');
    const playBtn = document.getElementById('tts-play');
    const pauseBtn = document.getElementById('tts-pause');
    const resumeBtn = document.getElementById('tts-resume');
    const stopBtn = document.getElementById('tts-stop');
    let voices = [];
    let utterance = null;

    if (!synth) {
      unsupportedBanner.style.display = 'block';
      return;
    }

    controls.style.display = 'block';

    function setStatus(message) {
      status.textContent = message || '';
    }

    function syncButtons(state) {
      const isSpeaking = synth.speaking && !synth.paused;
      const isPaused = synth.paused;
      playBtn.disabled = state === 'playing' || !textContent.trim();
      pauseBtn.disabled = !isSpeaking;
      resumeBtn.disabled = !isPaused;
      stopBtn.disabled = !isSpeaking && !isPaused;
    }

    function populateVoices() {
      const previousSelection = voiceSelect.value;
      voices = synth.getVoices();
      voiceSelect.innerHTML = '';
      voices.forEach((voice, index) => {
        if (voice.lang.includes('en')) {
          const option = document.createElement('option');
          option.value = index;
          option.textContent = `${voice.name} (${voice.lang})${voice.default ? ' • default' : ''}`;
          voiceSelect.appendChild(option);
        }
      });
      const hasPreviousSelection = Array.from(voiceSelect.options).some(
        (option) => option.value === previousSelection
      );
      if (hasPreviousSelection) {
        voiceSelect.value = previousSelection;
      } else {
        const defaultVoiceIndex = voices.findIndex((voice) => voice.default);
        voiceSelect.value = defaultVoiceIndex >= 0 ? defaultVoiceIndex : '0';
      }
    }

    populateVoices();
    if (speechSynthesis.onvoiceschanged !== undefined) {
      speechSynthesis.onvoiceschanged = populateVoices;
    }

    function createUtterance() {
      if (!textContent.trim()) {
        setStatus('There is no text to read.');
        return null;
      }

      const voiceIndex = parseInt(voiceSelect.value, 10);
      const selectedVoice = voices[Number.isInteger(voiceIndex) ? voiceIndex : 0] || null;
      const newUtterance = new SpeechSynthesisUtterance(textContent);
      newUtterance.rate = parseFloat(rateSlider.value);
      newUtterance.pitch = parseFloat(pitchSlider.value);
      if (selectedVoice) {
        newUtterance.voice = selectedVoice;
      }
      newUtterance.onend = () => {
        setStatus('Playback finished.');
        syncButtons();
      };
      newUtterance.onerror = () => {
        setStatus('Unable to play text. Please try again.');
        syncButtons();
      };

      return newUtterance;
    }

    playBtn.addEventListener('click', () => {
      synth.cancel();
      utterance = createUtterance();
      if (!utterance) {
        syncButtons();
        return;
      }
      setStatus('Playing…');
      synth.speak(utterance);
      syncButtons('playing');
    });

    pauseBtn.addEventListener('click', () => {
      if (!synth.speaking) return;
      synth.pause();
      setStatus('Paused.');
      syncButtons();
    });

    resumeBtn.addEventListener('click', () => {
      if (!synth.paused) return;
      synth.resume();
      setStatus('Playing…');
      syncButtons('playing');
    });

    stopBtn.addEventListener('click', () => {
      if (!synth.speaking && !synth.paused) return;
      synth.cancel();
      setStatus('Stopped.');
      syncButtons();
    });

    rateSlider.addEventListener('input', () => {
      rateValue.textContent = `${parseFloat(rateSlider.value).toFixed(2)}x`;
      if (utterance && synth.speaking) {
        synth.cancel();
        playBtn.click();
      }
    });

    pitchSlider.addEventListener('input', () => {
      pitchValue.textContent = parseFloat(pitchSlider.value).toFixed(2);
      if (utterance && synth.speaking) {
        synth.cancel();
        playBtn.click();
      }
    });

    rateValue.textContent = `${parseFloat(rateSlider.value).toFixed(2)}x`;
    pitchValue.textContent = parseFloat(pitchSlider.value).toFixed(2);
    syncButtons();
  })();
</script>
